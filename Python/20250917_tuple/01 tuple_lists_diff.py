# # Кортежи. Отличие списков от кортежей

# # 1 отличие:
# # Список []
# # Кортеж ()

# zamk_elems = (0, 4, 6, 8, 9)

# # просто кортеж можно записать просто без скобок:
# nezamk_elems = 1, 2, 3, 5, 7
# print(type(zamk_elems), type(nezamk_elems))
# # Печать типов покажет, что перед нами один и тот же тип данных - tuple


# # Из кортежей можно читать данные, как из списков (по номеру позиции):
# print('На позиции 3 в этом кортеже', zamk_elems, ' расположено ', zamk_elems[3])

# # Отличие: на первый уровень кортежа нельзя выполнить присваивание:
# import traceback
# try: 
#     zamk_elems[2] = 9
# except:
#     traceback.print_exc()

# # Если на первом уровне кортежа расположен объект, допускающий изменения,
# # его поменять будет можно:
# two_lists = ([1, 2], [3, 4])
# two_lists[0][0] = 111
# print(two_lists)

# # Вывод: кортеж - не абсолютная защита, а только некоторое ограничение

# # Удаление элемента
# try: 
#     del two_lists[1]
# except:
#     traceback.print_exc()


# Что делать?
# Создавать новый кортеж, в котром отсутствует желаемый к удаленю элемент
# Slice разрешен
# Сложение разрешено

# Создать кортеж из чисел от 1 до 8
# Показать, что это кортеж
# Удалить числа 4 и 7

# tpl01 = (1,2,3,5,6,8,9)
# # print(type(tpl01))

# slice01 = tpl01[1:4]
# print(tpl01)
# print(slice01)

# combined_tuplr = tpl01+slice01
# print(combined_tuplr)

for i in range[9]:
    print(i)
